generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      Role
  image     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  guru      Guru?
  orangTua  OrangTua?
  siswa     Siswa?

  @@map("users")
}

model Siswa {
  id              String          @id @default(cuid())
  userId          String          @unique
  nisn            String          @unique
  nis             String          @unique
  kelasId         String
  jenisKelamin    String
  tempatLahir     String
  tanggalLahir    DateTime
  alamat          String?
  noHP            String?
  orangTuaId      String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  approvedAt      DateTime?
  approvedBy      String?
  createdBy       String?
  rejectedAt      DateTime?
  rejectedBy      String?
  rejectionReason String?
  status          String          @default("pending")
  hafalan         Hafalan[]
  presensi        Presensi[]
  kelas           Kelas           @relation(fields: [kelasId], references: [id])
  orangTua        OrangTua?       @relation(fields: [orangTuaId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetHafalan   TargetHafalan[]
  wisudaSiswa     WisudaSiswa[]

  @@map("siswa")
}

model Guru {
  id           String       @id @default(cuid())
  userId       String       @unique
  nip          String?      @unique
  jenisKelamin String
  noHP         String?
  alamat       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  agenda       Agenda[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  guruKelas    GuruKelas[]
  hafalan      Hafalan[]
  pengumuman   Pengumuman[]

  @@map("guru")
}

model OrangTua {
  id        String   @id @default(cuid())
  userId    String   @unique
  pekerjaan String?
  noHP      String?
  alamat    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  siswa     Siswa[]

  @@map("orang_tua")
}

model TahunAjaran {
  id             String   @id @default(cuid())
  nama           String
  semester       Int
  tanggalMulai   DateTime
  tanggalSelesai DateTime
  isActive       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  kelas          Kelas[]

  @@map("tahun_ajaran")
}

model Kelas {
  id             String           @id @default(cuid())
  nama           String
  tingkat        Int
  tahunAjaranId  String
  targetJuz      Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  agenda         Agenda[]
  guruKelas      GuruKelas[]
  tahunAjaran    TahunAjaran      @relation(fields: [tahunAjaranId], references: [id])
  siswa          Siswa[]
  targetHafalan  TargetHafalan[]
  weeklyMaterial WeeklyMaterial[]

  @@map("kelas")
}

model GuruKelas {
  id             String    @id @default(cuid())
  guruId         String
  kelasId        String
  peran          String    @default("pengganti")
  isActive       Boolean   @default(true)
  tanggalMulai   DateTime  @default(now())
  tanggalSelesai DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  guru           Guru      @relation(fields: [guruId], references: [id], onDelete: Cascade)
  kelas          Kelas     @relation(fields: [kelasId], references: [id], onDelete: Cascade)

  @@unique([guruId, kelasId])
  @@map("guru_kelas")
}

model Surah {
  id          String    @id @default(cuid())
  nomor       Int       @unique
  nama        String
  namaLatin   String
  jumlahAyat  Int
  tempatTurun String
  juz         Int[]
  hafalan     Hafalan[]

  @@map("surah")
}

model Hafalan {
  id              String        @id @default(cuid())
  siswaId         String
  guruId          String
  surahId         String
  ayatMulai       Int
  ayatSelesai     Int
  juz             Int
  halaman         Int?
  tanggalSetor    DateTime      @default(now())
  status          StatusHafalan @default(LANCAR)
  nilaiTartil     Int?
  nilaiTajwid     Int?
  nilaiMakhraj    Int?
  nilaiKelancaran Int?
  nilaiAkhir      Float?
  predikat        String?
  catatan         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  guru            Guru          @relation(fields: [guruId], references: [id])
  siswa           Siswa         @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  surah           Surah         @relation(fields: [surahId], references: [id])

  @@map("hafalan")
}

model TargetHafalan {
  id          String    @id @default(cuid())
  siswaId     String?
  kelasId     String?
  targetJuz   Int
  targetSurah String?
  targetAyat  Int?
  bulan       Int
  tahun       Int
  deadline    DateTime?
  keterangan  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  kelas       Kelas?    @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  siswa       Siswa?    @relation(fields: [siswaId], references: [id], onDelete: Cascade)

  @@map("target_hafalan")
}

model Presensi {
  id         String          @id @default(cuid())
  siswaId    String
  tanggal    DateTime        @default(now())
  status     StatusKehadiran
  keterangan String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  siswa      Siswa           @relation(fields: [siswaId], references: [id], onDelete: Cascade)

  @@map("presensi")
}

model Pengumuman {
  id         String   @id @default(cuid())
  guruId     String
  judul      String
  isi        String
  isPenting  Boolean  @default(false)
  targetRole Role[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  guru       Guru     @relation(fields: [guruId], references: [id])

  @@map("pengumuman")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  @@map("notifications")
}

model ActivityLog {
  id          String         @id @default(cuid())
  userId      String
  userName    String
  userRole    Role
  action      ActivityAction
  module      ActivityModule
  description String
  ipAddress   String?
  userAgent   String?
  metadata    String?
  createdAt   DateTime       @default(now())

  @@map("activity_logs")
}

model Agenda {
  id           String   @id @default(cuid())
  guruId       String
  kelasId      String?
  judul        String
  deskripsi    String?
  tanggal      DateTime
  waktuMulai   String
  waktuSelesai String?
  status       String   @default("upcoming")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  guru         Guru     @relation(fields: [guruId], references: [id], onDelete: Cascade)
  kelas        Kelas?   @relation(fields: [kelasId], references: [id])

  @@map("agenda")
}

model Wisuda {
  id            String        @id @default(cuid())
  guruId        String
  tanggalWisuda DateTime
  lokasiWisuda  String
  keterangan    String?
  status        String        @default("upcoming")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  siswa         WisudaSiswa[]

  @@map("wisuda")
}

model WisudaSiswa {
  id        String   @id @default(cuid())
  wisudaId  String
  siswaId   String
  totalJuz  Int
  createdAt DateTime @default(now())
  siswa     Siswa    @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  wisuda    Wisuda   @relation(fields: [wisudaId], references: [id], onDelete: Cascade)

  @@unique([wisudaId, siswaId])
  @@map("wisuda_siswa")
}

enum Role {
  SISWA
  GURU
  ORANG_TUA
  ADMIN
}

enum StatusHafalan {
  LANCAR
  PERLU_PERBAIKAN
  DITOLAK
}

enum StatusKehadiran {
  HADIR
  SAKIT
  IZIN
  ALPA
}

enum ActivityAction {
  LOGIN
  LOGOUT
  CREATE
  UPDATE
  DELETE
  VIEW
  EXPORT
  APPROVE
  REJECT
  IMPORT
}

model WeeklyMaterial {
  id          String   @id @default(cuid())
  surahNumber Int
  ayatMulai   Int
  ayatSelesai Int
  judul       String?
  keterangan  String?
  createdBy   String
  kelasId     String?
  targetRole  Role[]
  weekStart   DateTime
  weekEnd     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  kelas       Kelas?   @relation(fields: [kelasId], references: [id], onDelete: Cascade)

  @@map("weekly_material")
}

enum ActivityModule {
  USER
  SISWA
  GURU
  ORANG_TUA
  KELAS
  HAFALAN
  PRESENSI
  LAPORAN
  PENGUMUMAN
  AGENDA
  WISUDA
  TARGET_HAFALAN
  TAHUN_AJARAN
  STATISTIK
  SETTINGS
  AUTH
  QURAN_REFERENCE
}
